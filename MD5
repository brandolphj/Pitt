package Security;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Scanner;


public class PasswordCracker {

	private static long start;
	
	
	public static void main(String[] args) {
		
		System.out.println("Enter hashed password: ");
		Scanner userIn = new Scanner(System.in);
        String password = userIn.nextLine();
        String choose;
        boolean decideSymb = true;
        do {
            System.out.println("Is this a type 2 password? if so type in [Y] if not type in [N]");
            choose = userIn.nextLine();
        } while (!choose.equalsIgnoreCase("y") && !choose.equalsIgnoreCase("n"));
        if (choose.equalsIgnoreCase("n")) {
            decideSymb = false;
       
		//password= (md5(password));
        }

        ArrayList<String> arr = new ArrayList<String>();
        try (BufferedReader br = new BufferedReader(new FileReader("Dictionary.txt")))
        {

            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {
                arr.add(sCurrentLine);
            }
           
            start = System.currentTimeMillis();
            for(String s : arr) {
            	
				System.out.println(md5(s));
				if (password.equals(md5(s))) {
	            	System.err.println("The password is " + s);
	            	System.err.println("It took " + convertmillis(System.currentTimeMillis() - start));
				
				System.exit(0);
				
            	}	
            }    
        } catch (IOException e) {
            e.printStackTrace();
        } 

        
        if (decideSymb == true) {
        	String chars = "@#$%&abcdefghijklmnopqrstuvwxyz";
        	
            for (int length = 2; length <= 15; length++) {
                String newPass = "";
                newPass = repeatString("@", length);
                int lastInd = length - 1;
                while (!newPass.equals(password)) {
                    String end = repeatString("z", newPass.length());
                    if (newPass.equals(end)) {
                        break;
                    }
                    int indInChars = chars.indexOf(newPass.charAt(lastInd));
                    if (indInChars < chars.length() && indInChars >= 0) {
                        boolean t = true;
                        int howManyZs = 0; 
                        while (t == true) {
                            if (newPass.charAt(newPass.length() - 1 - howManyZs) == 'z') {
                                howManyZs++;
                            } else {
                                t = false;
                            }
                        }
                        String reset0s = "";
                        for (int l = 0; l < howManyZs; l++) {
                            reset0s += "@";
                        }
                        if (lastInd < newPass.length() - 1 && lastInd > 0) {
                            lastInd--;
                            indInChars = chars.indexOf(newPass.charAt(lastInd)) + 1;
                            newPass = newPass.substring(0, lastInd) + chars.charAt(indInChars)
                                    + newPass.substring(lastInd + 1);
                        } else if (newPass.length() - howManyZs == 1) {
                            newPass = chars.substring(chars.indexOf(newPass.charAt(0)) + 1,
                                    chars.indexOf(newPass.charAt(0)) + 2) + reset0s;
                        } else if (newPass.length() - howManyZs > 1 && howManyZs != 0) {
                            newPass = newPass.substring(0, newPass.length() - 1 - howManyZs)
                                    + chars.substring(chars.indexOf(newPass.charAt(newPass.length() - 1 - howManyZs)) + 1,
                                            chars.indexOf(newPass.charAt(newPass.length() - 1 - howManyZs)) + 2)
                                    + reset0s;
                        } else {
                            indInChars = chars.indexOf(newPass.charAt(lastInd)) + 1;
                            newPass = newPass.substring(0, lastInd) + chars.charAt(indInChars);
                        }
                        System.out.println(newPass);
                        
                    }
                }
                if (newPass.equals(password)) {
                	System.err.println("The password is " + password);
	            	System.err.println("It took " + convertmillis(System.currentTimeMillis() - start));
                   break;
                }
            }
        }
	}

        private static String repeatString(String s, int n) { 
            StringBuilder sb = new StringBuilder(n);
            while (n-- > 0) {
                sb.append(s);
            }
            return sb.toString();
        }
    
        	
        	
	
	
	public static String convertmillis(long input) {
		int days = 0, hours = 0, minutes = 0, seconds = 0, millis = 0;
		
		int day = 86400000;
		int hour = 3600000;
		int minute = 60000;
		int second = 1000;
		
		if(input >= day) {
			days = (int) (input / day);
			millis = (int) (input % day);
		} else
			millis = (int) input;
		
		if ( millis >= hour) {
			hours = millis / hour;
			millis = millis % hour;
		}
		if ( millis >= minute) {
			minutes = millis / minute;
			millis = millis % minute;
		}
		if ( millis >= second) {
			seconds = millis / second;
			millis = millis % second;
		}
		
		return (days + " day(s), " + hours + " hours, " + minutes + " min," + seconds + " s and " + millis + " ms");
	}
	
	
	
	 public void main1(String[] args) {
			String password = "prevention";
			System.out.println("MD5 in hex: " + md5(password));
			}
			public static String md5(String input) {
			String md5 = null;
			if(null == input) return null;
			try {
			//Create MessageDigest object for MD5
			MessageDigest digest = MessageDigest.getInstance("MD5");
			//Update input string in message digest
			digest.update(input.getBytes(), 0, input.length());
			//Converts message digest value in base 16 (hex)
			md5 = new BigInteger(1, digest.digest()).toString(16);
			} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			}
			return md5;
			}
			}


